{"version":3,"file":"h5p.min.js","sources":["../src/h5p.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Initializes and manages H5P elements within a Moodle environment.\r\n *\r\n * This module defines functions to handle user interactions with H5P content,\r\n * capturing xAPI events, and storing user responses. It listens for specific\r\n * xAPI verbs such as 'answered', 'completed', and 'interacted' to determine\r\n * when to store user responses. The module also handles the removal of warning\r\n * messages and refreshes content elements upon successful data storage.\r\n *\r\n * @module cdelement_h5p/h5p\r\n * @copyright  2024 bdecent gmbh <https://bdecent.de>\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'mod_contentdesigner/elements', 'core/ajax', 'core/notification', 'cdelement_h5p/repository'],\r\n    function ($, Elements, AJAX, Notification, Repository) {\r\n\r\n        var interactedInstances = [];\r\n\r\n        /**\r\n         * H5P element. Get the user reponse after attempt and send a request to store data in moodle.\r\n         *\r\n         * @param {int} instance\r\n         * @param {int} cdattemptid\r\n         */\r\n        const elementH5P = (instance, cdattemptid) => {\r\n            let instanceElem = document.querySelector('.element-h5p .element-content[data-instanceid=\"' + instance + '\"]');\r\n            var iframe = instanceElem.querySelector('.h5p-player');\r\n            iframe.onload = () => h5pExternal(instance, cdattemptid);\r\n        };\r\n\r\n\r\n        const h5pExternal = (instance, cdattemptid) => {\r\n            let instanceElem = document.querySelector('.element-h5p .element-content[data-instanceid=\"' + instance + '\"]');\r\n            var iframe = instanceElem.querySelector('.h5p-player');\r\n\r\n            if (iframe.contentWindow.H5P == undefined) {\r\n                setTimeout(() => elementH5P(instance), 200);\r\n                return;\r\n            }\r\n\r\n            var h5p = iframe.contentWindow.H5P;\r\n\r\n            if (h5p.externalDispatcher === undefined) {\r\n                setTimeout(() => elementH5P(instance), 200);\r\n                return;\r\n            }\r\n\r\n            /** @var {boolean} statementPosted Whether the statement has been sent or not, to avoid sending xAPI State after it. */\r\n            var statementPosted = false;\r\n\r\n            h5p.externalDispatcher.on('xAPI', function (event) {\r\n                // Skip malformed events.\r\n                var hasStatement = event && event.data && event.data.statement;\r\n                if (!hasStatement) {\r\n                    return;\r\n                }\r\n\r\n                var statement = event.data.statement;\r\n                var validVerb = statement.verb && statement.verb.id;\r\n                if (!validVerb) {\r\n                    return;\r\n                }\r\n\r\n                var isCompleted = statement.verb.id === 'http://adlnet.gov/expapi/verbs/answered'\r\n                    || statement.verb.id === 'http://adlnet.gov/expapi/verbs/completed'\r\n                    || statement.verb.id === 'http://activitystrea.ms/schema/1.0/consume';\r\n\r\n                var isChild = statement.context && statement.context.contextActivities &&\r\n                    statement.context.contextActivities.parent &&\r\n                    statement.context.contextActivities.parent[0] &&\r\n                    statement.context.contextActivities.parent[0].id;\r\n                // Attempted response only stored.\r\n                var isInteract = statement.verb.id === 'http://adlnet.gov/expapi/verbs/interacted';\r\n                var isInteracted = false;\r\n                var isResponsed = false;\r\n                var extensionID;\r\n                if (isInteract) {\r\n                    try {\r\n                        extensionID = statement.object.definition.extensions['http://h5p.org/x-api/h5p-local-content-id'];\r\n                        interactedInstances[extensionID] = true;\r\n                    } catch (err) {\r\n                        Notification.alert(err);\r\n                    }\r\n                    return;\r\n                } else {\r\n                    try {\r\n                        extensionID = statement.object.definition.extensions['http://h5p.org/x-api/h5p-local-content-id'];\r\n                        isInteracted = interactedInstances[extensionID] ?? false;\r\n                    } catch (err) {\r\n                        Notification.alert(err);\r\n                    }\r\n                }\r\n\r\n                if (statement.result === undefined) {\r\n                    return;\r\n                }\r\n                // Remove the separator[,] from response.\r\n                if (statement.result.response !== undefined) {\r\n                    var max = statement.result.score.max ?? 0;\r\n                    var response = statement.result.response;\r\n                    for (var i = 1; i <= max; i++) {\r\n                        response = response.replace('[,]', '');\r\n                    }\r\n                    isResponsed = (response != '');\r\n                } else {\r\n                    // Response is not available.\r\n                    isResponsed = true;\r\n                    if (statement.result?.completion) {\r\n                        isInteract = statement.result.completion;\r\n                    }\r\n                }\r\n\r\n                // If h5p has grade setup then student should pass all.\r\n                var isPassed = statement.result.score !== undefined ? (statement.result.score.max < 1\r\n                    || (statement.result.score.max == statement.result.score.raw)\r\n                    || (statement.result.success !== undefined && statement.result.success == true)) : true;\r\n\r\n                storeMaxscore(statement, instance);\r\n                if (isCompleted && !isChild && isResponsed && isInteracted && isPassed) {\r\n                    var promises = storeUserResponse(statement, instance, cdattemptid);\r\n                    if (!promises) {\r\n                        return;\r\n                    }\r\n                    // Mark the statement has been sent, to avoid sending xAPI State after it.\r\n                    statementPosted = true;\r\n\r\n                    promises[0].then((response) => {\r\n                        if (response) {\r\n                            // Remove the warning message.\r\n                            removeWarning();\r\n                            // Update the other elemnets and chapters.\r\n                            Elements.refreshContent();\r\n                        }\r\n                        return;\r\n                    }).catch(Notification.exception);\r\n                }\r\n            });\r\n\r\n            h5p.externalDispatcher.on('xAPIState', function (event) {\r\n                var moodlecomponent = h5p.getMoodleComponent();\r\n                var contentId = event.data.activityId;\r\n                var stateId = event.data.stateId;\r\n                var registration = 'cdelement_h5p-' + instance;\r\n                var state = event.data.state;\r\n                if (state === undefined) {\r\n                    // When state is undefined, a call to the WS for getting the state could be done. However, for now, this is not\r\n                    // required because the content state is initialised with PHP.\r\n                    return;\r\n                }\r\n\r\n                if (state === null) {\r\n                    // When this method is called from the H5P API with null state,\r\n                    // the state must be deleted using the rest of attributes.\r\n                    Repository.deleteState(moodlecomponent, contentId, h5p.getxAPIActor(), stateId, registration);\r\n                } else if (!statementPosted) {\r\n                    // Only update the state if a statement hasn't been posted recently.\r\n                    // When state is defined, it needs to be updated. As not all the H5P content types are returning a JSON, we need\r\n                    // to simulate it because xAPI State defines statedata as a JSON.\r\n                    var statedata = {\r\n                        h5p: state\r\n                    };\r\n                    Repository.postState(moodlecomponent, contentId, h5p.getxAPIActor(),\r\n                        stateId, JSON.stringify(statedata), registration);\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Remove the warning from response.\r\n         */\r\n        const removeWarning = () => {\r\n            if (Elements.courseContent().querySelector('.label.label-warning') !== null) {\r\n                Elements.courseContent().querySelector('.label.label-warning').remove();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Send the request to store the user h5p response.\r\n         * @param {Object} statement\r\n         * @param {int} instance\r\n         * @returns {Object}\r\n         */\r\n        const storeMaxscore = (statement, instance) => {\r\n\r\n            var params = {\r\n                cmid: Elements.contentDesignerData().cmid,\r\n                instanceid: instance,\r\n                maxscore: statement.result.score?.max ?? 0,\r\n            };\r\n\r\n            var promises = AJAX.call([{\r\n                methodname: 'cdelement_h5p_store_maxscore',\r\n                args: params\r\n            }]);\r\n\r\n            return promises;\r\n        };\r\n\r\n        /**\r\n         * Send the request to store the user h5p response.\r\n         * @param {Object} statement\r\n         * @param {int} instance\r\n         * @param {int} cdattemptid\r\n         * @returns {Object}\r\n         */\r\n        const storeUserResponse = (statement, instance, cdattemptid) => {\r\n\r\n            var params = {\r\n                cmid: Elements.contentDesignerData().cmid,\r\n                instanceid: instance,\r\n                cdattemptid: cdattemptid,\r\n                result: {\r\n                    completion: statement.result.completion ?? 0,\r\n                    success: statement.result.success ?? 0,\r\n                    duration: statement.result.duration ?? '',\r\n                    response: statement.result.response ?? '',\r\n                    score: {\r\n                        min: statement.result.score.min ?? 0,\r\n                        max: statement.result.score.max ?? 0,\r\n                        raw: statement.result.score.raw ?? 0,\r\n                        scaled: statement.result.score.scaled ?? 0\r\n                    }\r\n                },\r\n            };\r\n\r\n            var promises = AJAX.call([{\r\n                methodname: 'cdelement_h5p_store_result',\r\n                args: params\r\n            }]);\r\n\r\n            return promises;\r\n        };\r\n\r\n        return {\r\n            init: function (instance, cdattemptid) {\r\n                elementH5P(instance, cdattemptid);\r\n            }\r\n        };\r\n    });\r\n"],"names":["define","$","Elements","AJAX","Notification","Repository","interactedInstances","elementH5P","instance","cdattemptid","document","querySelector","onload","h5pExternal","iframe","undefined","contentWindow","H5P","h5p","externalDispatcher","statementPosted","on","event","data","statement","verb","id","extensionID","isCompleted","isChild","context","contextActivities","parent","isInteract","isInteracted","isResponsed","object","definition","extensions","err","alert","result","response","max","score","i","replace","_statement$result","completion","isPassed","raw","success","storeMaxscore","promises","storeUserResponse","then","removeWarning","refreshContent","catch","exception","moodlecomponent","getMoodleComponent","contentId","activityId","stateId","registration","state","deleteState","getxAPIActor","statedata","postState","JSON","stringify","setTimeout","courseContent","remove","params","cmid","contentDesignerData","instanceid","maxscore","_statement$result$sco3","call","methodname","args","duration","min","scaled","init"],"mappings":"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"}