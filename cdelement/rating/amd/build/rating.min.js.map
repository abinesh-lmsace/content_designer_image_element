{"version":3,"file":"rating.min.js","sources":["../src/rating.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Initialize the rating element results.\r\n *\r\n * @module cdelement_rating/rating\r\n * @copyright  2025 bdecent gmbh <https://bdecent.de>\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['core/ajax', 'mod_contentdesigner/elements'],\r\n    function (Ajax, Elements) {\r\n\r\n        /**\r\n         * Initialize the rating element results.\r\n         */\r\n        const initRating = () => {\r\n\r\n            document.querySelectorAll('.chapters-list li.element-rating .cdelement-rating').forEach((ratingElement) => {\r\n                const scalecontainer = ratingElement.querySelector('.rating-scale');\r\n\r\n                if (!scalecontainer) {\r\n                    return;\r\n                }\r\n\r\n                scalecontainer.addEventListener('click', (event) => {\r\n\r\n                    const selectedoption = event.target.closest('.rating-item');\r\n\r\n                    if (!selectedoption) {\r\n                        return;\r\n                    }\r\n\r\n                    var rateid = parseInt(ratingElement.dataset.rateid, 10);\r\n                    var contentdesignerid = parseInt(ratingElement.dataset.contentdesignerid, 10);\r\n                    var changerating = (scalecontainer.dataset.changerating != 0) ? true : false;\r\n                    var response = (scalecontainer.dataset.response != 0) ? true : false;\r\n\r\n                    if (changerating || !response) {\r\n\r\n                        var value = selectedoption.dataset.value;\r\n\r\n                        // Remove previously selected state.\r\n                        scalecontainer.querySelectorAll('.rating-item').forEach(option => {\r\n                            option.classList.remove('selected');\r\n                        });\r\n\r\n                        // Highlight the selected rating.\r\n                        selectedoption.classList.add('selected');\r\n\r\n                        // Send rating data via AJAX.\r\n                        Ajax.call([{\r\n                            methodname: 'cdelement_rating_store_rating_response_result',\r\n                            args: {\r\n                                value: value,\r\n                                rateid: rateid,\r\n                                contentdesignerid: contentdesignerid,\r\n                            },\r\n                            done: function (response) {\r\n                                if (response.result) {\r\n                                    ratingElement.querySelector('.rating-result').innerHTML = response.result;\r\n                                }\r\n\r\n                                if (response.average !== null) {\r\n                                    var ratingoption = ratingElement.querySelector(\".rating-item[data-value='\" +\r\n                                        response.average + \"']\");\r\n\r\n                                    scalecontainer.querySelectorAll('.rating-item').forEach(option => {\r\n                                        option.classList.remove('average');\r\n                                    });\r\n\r\n                                    ratingoption.classList.add('average');\r\n                                }\r\n\r\n                                Elements.removeWarning();\r\n                                Elements.refreshContent();\r\n                                return;\r\n                            }\r\n                        }]);\r\n                    }\r\n                });\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Disable the average result type field when scale is not set to non numeric.\r\n         */\r\n        const disbleResulttypefield = () => {\r\n            var scale = document.querySelector('#id_elementsettingscontainer #id_scale');\r\n            var resulttype = document.querySelector('#id_elementsettingscontainer #id_resulttype');\r\n\r\n            if (scale !== null && scale.value == 0) {\r\n                resulttype.querySelector('option[value=\"1\"]').removeAttribute('disabled');\r\n                resulttype.querySelector('option[value=\"2\"]').setAttribute('disabled', true);\r\n            } else {\r\n                resulttype.querySelector('option[value=\"1\"]').setAttribute('disabled', true);\r\n                resulttype.querySelector('option[value=\"2\"]').removeAttribute('disabled');\r\n            }\r\n\r\n            scale.addEventListener('change', (e) => {\r\n                var val = e.target.value;\r\n                if (val == 0) {\r\n                    resulttype.querySelector('option[value=\"1\"]').removeAttribute('disabled');\r\n                    resulttype.querySelector('option[value=\"2\"]').setAttribute('disabled', true);\r\n                } else {\r\n                    resulttype.querySelector('option[value=\"1\"]').setAttribute('disabled', true);\r\n                    resulttype.querySelector('option[value=\"2\"]').removeAttribute('disabled');\r\n                }\r\n            });\r\n        };\r\n\r\n        return {\r\n            init: function () {\r\n                initRating();\r\n            },\r\n            disbleResulttypefield: disbleResulttypefield,\r\n        };\r\n\r\n    });"],"names":["define","Ajax","Elements","init","document","querySelectorAll","forEach","ratingElement","scalecontainer","querySelector","addEventListener","event","selectedoption","target","closest","rateid","parseInt","dataset","contentdesignerid","changerating","response","value","option","classList","remove","add","call","methodname","args","done","result","innerHTML","average","ratingoption","removeWarning","refreshContent","disbleResulttypefield","scale","resulttype","removeAttribute","setAttribute","e"],"mappings":";;;;;;;AAuBAA,iCAAO,CAAC,YAAa,iCACjB,SAAUC,KAAMC,gBAoGL,CACHC,KAAM,WA9FNC,SAASC,iBAAiB,sDAAsDC,SAASC,sBAC/EC,eAAiBD,cAAcE,cAAc,iBAE9CD,gBAILA,eAAeE,iBAAiB,SAAUC,cAEhCC,eAAiBD,MAAME,OAAOC,QAAQ,mBAEvCF,oBAIDG,OAASC,SAAST,cAAcU,QAAQF,OAAQ,IAChDG,kBAAoBF,SAAST,cAAcU,QAAQC,kBAAmB,IACtEC,aAAuD,GAAvCX,eAAeS,QAAQE,aACvCC,SAA+C,GAAnCZ,eAAeS,QAAQG,YAEnCD,eAAiBC,SAAU,KAEvBC,MAAQT,eAAeK,QAAQI,MAGnCb,eAAeH,iBAAiB,gBAAgBC,SAAQgB,SACpDA,OAAOC,UAAUC,OAAO,eAI5BZ,eAAeW,UAAUE,IAAI,YAG7BxB,KAAKyB,KAAK,CAAC,CACPC,WAAY,gDACZC,KAAM,CACFP,MAAOA,MACPN,OAAQA,OACRG,kBAAmBA,mBAEvBW,KAAM,SAAUT,aACRA,SAASU,SACTvB,cAAcE,cAAc,kBAAkBsB,UAAYX,SAASU,QAG9C,OAArBV,SAASY,QAAkB,KACvBC,aAAe1B,cAAcE,cAAc,4BAC3CW,SAASY,QAAU,MAEvBxB,eAAeH,iBAAiB,gBAAgBC,SAAQgB,SACpDA,OAAOC,UAAUC,OAAO,cAG5BS,aAAaV,UAAUE,IAAI,WAG/BvB,SAASgC,gBACThC,SAASiC,8BAwC7BC,sBA5B0B,SACtBC,MAAQjC,SAASK,cAAc,0CAC/B6B,WAAalC,SAASK,cAAc,+CAE1B,OAAV4B,OAAiC,GAAfA,MAAMhB,OACxBiB,WAAW7B,cAAc,qBAAqB8B,gBAAgB,YAC9DD,WAAW7B,cAAc,qBAAqB+B,aAAa,YAAY,KAEvEF,WAAW7B,cAAc,qBAAqB+B,aAAa,YAAY,GACvEF,WAAW7B,cAAc,qBAAqB8B,gBAAgB,aAGlEF,MAAM3B,iBAAiB,UAAW+B,IAEnB,GADDA,EAAE5B,OAAOQ,OAEfiB,WAAW7B,cAAc,qBAAqB8B,gBAAgB,YAC9DD,WAAW7B,cAAc,qBAAqB+B,aAAa,YAAY,KAEvEF,WAAW7B,cAAc,qBAAqB+B,aAAa,YAAY,GACvEF,WAAW7B,cAAc,qBAAqB8B,gBAAgB"}