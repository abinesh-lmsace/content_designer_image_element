{"version":3,"file":"poll.min.js","sources":["../src/poll.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Initialize the poll element results.\r\n *\r\n * @module cdelement_poll/poll\r\n * @copyright  2024 bdecent gmbh <https://bdecent.de>\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['core/ajax', 'mod_contentdesigner/elements', 'core/notification', 'core/fragment', 'core/templates'],\r\n    function (Ajax, Elements, notification, Fragment, Templates) {\r\n\r\n        /**\r\n         * Initialize the poll element results.\r\n         */\r\n        const initpoll = () => {\r\n            var polls = document.querySelectorAll('.chapters-list li.element-poll .poll-section');\r\n            polls.forEach((poll) => {\r\n                var maxselection = poll.dataset.selectcount;\r\n                var updaterating = poll.dataset.updaterating;\r\n                var checkboxes = poll.querySelectorAll('input[name=\"answer[]\"]');\r\n                checkboxes.forEach((checkbox) => {\r\n                    checkbox.addEventListener('change', function () {\r\n                        var checkedcount = poll.querySelectorAll('input[name=\"answer[]\"]:checked').length;\r\n                        if (checkedcount >= maxselection && maxselection >= 1) {\r\n                            checkboxes.forEach(function (box) {\r\n                                if (!box.checked) {\r\n                                    box.disabled = true;\r\n                                }\r\n                            });\r\n                        } else {\r\n                            checkboxes.forEach(function (box) {\r\n                                box.disabled = false;\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                var submitbtn = poll.querySelector('form .submit');\r\n                submitbtn.addEventListener('click', () => {\r\n                    // Collect checked option values.\r\n                    var optionids = [];\r\n                    var checkedboxes = poll.querySelectorAll('input[name=\"answer[]\"]:checked, input[name=\"answer\"]:checked');\r\n                    checkedboxes.forEach(function (checkbox) {\r\n                        optionids.push(checkbox.value);\r\n                    });\r\n\r\n                    var chartarea = poll.nextElementSibling;\r\n\r\n                    Ajax.call([{\r\n                        methodname: 'cdelement_poll_store_poll_result',\r\n                        args: {\r\n                            optionids: optionids, // Options ID.\r\n                            pollid: parseInt(poll.dataset.pollid), // Poll ID.\r\n                            instanceid: parseInt(poll.dataset.instanceid), // Content designer ID.\r\n                        },\r\n                        done: function (response) {\r\n\r\n                            if (response) {\r\n                                var args = {\r\n                                    cmid: Elements.contentDesignerData().cmid,\r\n                                    pollid: parseInt(poll.dataset.pollid), // Poll ID.\r\n                                };\r\n\r\n                                Fragment.loadFragment('cdelement_poll', 'update_pollchart',\r\n                                    Elements.contentDesignerData().contextid, args).done((html, js) => {\r\n                                        Templates.replaceNodeContents(chartarea, html, js);\r\n                                    }).catch(notification.exception);\r\n\r\n                                var checkboxes = poll.querySelectorAll('input[name=\"answer[]\"], input[name=\"answer\"]');\r\n\r\n                                if (updaterating != 1) {\r\n                                    poll.querySelector('.submit').disabled = true;\r\n                                    checkboxes.forEach((checkbox) => {\r\n                                        checkbox.disabled = true;\r\n                                    });\r\n                                } else {\r\n                                    poll.querySelector('.submit').disabled = false;\r\n                                    checkboxes.forEach(function (checkbox) {\r\n                                        var checkedcount = poll.querySelectorAll('input[name=\"answer[]\"]:checked').length;\r\n                                        if (checkedcount >= maxselection && maxselection >= 1) {\r\n                                            if (!checkbox.checked) {\r\n                                                checkbox.disabled = true;\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                Elements.removeWarning();\r\n                                Elements.refreshContent();\r\n                                return;\r\n                            }\r\n                        }\r\n                    }]);\r\n                });\r\n            });\r\n        };\r\n\r\n        return {\r\n            init: function () {\r\n                initpoll();\r\n            }\r\n        };\r\n    });\r\n"],"names":["define","Ajax","Elements","notification","Fragment","Templates","init","document","querySelectorAll","forEach","poll","maxselection","dataset","selectcount","updaterating","checkboxes","checkbox","addEventListener","length","box","checked","disabled","querySelector","optionids","push","value","chartarea","nextElementSibling","call","methodname","args","pollid","parseInt","instanceid","done","response","cmid","contentDesignerData","loadFragment","contextid","html","js","replaceNodeContents","catch","exception","removeWarning","refreshContent"],"mappings":";;;;;;;AAuBAA,6BAAO,CAAC,YAAa,+BAAgC,oBAAqB,gBAAiB,mBACvF,SAAUC,KAAMC,SAAUC,aAAcC,SAAUC,iBAwFvC,CACHC,KAAM,WAnFMC,SAASC,iBAAiB,gDAChCC,SAASC,WACPC,aAAeD,KAAKE,QAAQC,YAC5BC,aAAeJ,KAAKE,QAAQE,aAC5BC,WAAaL,KAAKF,iBAAiB,0BACvCO,WAAWN,SAASO,WAChBA,SAASC,iBAAiB,UAAU,WACbP,KAAKF,iBAAiB,kCAAkCU,QACvDP,cAAgBA,cAAgB,EAChDI,WAAWN,SAAQ,SAAUU,KACpBA,IAAIC,UACLD,IAAIE,UAAW,MAIvBN,WAAWN,SAAQ,SAAUU,KACzBA,IAAIE,UAAW,WAMfX,KAAKY,cAAc,gBACzBL,iBAAiB,SAAS,SAE5BM,UAAY,GACGb,KAAKF,iBAAiB,gEAC5BC,SAAQ,SAAUO,UAC3BO,UAAUC,KAAKR,SAASS,cAGxBC,UAAYhB,KAAKiB,mBAErB1B,KAAK2B,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,CACFP,UAAWA,UACXQ,OAAQC,SAAStB,KAAKE,QAAQmB,QAC9BE,WAAYD,SAAStB,KAAKE,QAAQqB,aAEtCC,KAAM,SAAUC,aAERA,SAAU,KACNL,KAAO,CACPM,KAAMlC,SAASmC,sBAAsBD,KACrCL,OAAQC,SAAStB,KAAKE,QAAQmB,SAGlC3B,SAASkC,aAAa,iBAAkB,mBACpCpC,SAASmC,sBAAsBE,UAAWT,MAAMI,MAAK,CAACM,KAAMC,MACxDpC,UAAUqC,oBAAoBhB,UAAWc,KAAMC,OAChDE,MAAMxC,aAAayC,eAEtB7B,WAAaL,KAAKF,iBAAiB,uDAEnB,GAAhBM,cACAJ,KAAKY,cAAc,WAAWD,UAAW,EACzCN,WAAWN,SAASO,WAChBA,SAASK,UAAW,OAGxBX,KAAKY,cAAc,WAAWD,UAAW,EACzCN,WAAWN,SAAQ,SAAUO,UACNN,KAAKF,iBAAiB,kCAAkCU,QACvDP,cAAgBA,cAAgB,IAC3CK,SAASI,UACVJ,SAASK,UAAW,QAMpCnB,SAAS2C,qBACT3C,SAAS4C"}