{"version":3,"file":"chapter.min.js","sources":["../src/chapter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Initializes event listeners and manages chapter completion and progress updates\r\n * for the content designer module. Handles user interactions such as completing\r\n * chapters and updating the progress bar. Supports both standard and popup formats.\r\n * Utilizes AJAX calls to update chapter completion status and refreshes content\r\n * accordingly. Ensures sticky progress bar behavior during scrolling.\r\n *\r\n * @module cdelement_chapter/chapter\r\n * @copyright  2024 bdecent gmbh <https://bdecent.de>\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'mod_contentdesigner/elements', 'core/ajax', 'core/fragment',\r\n    'core/templates', 'core/loadingicon', 'core/notification', 'core/str'],\r\n    function ($, Elements, AJAX, Fragment, Templates, LoadingIcon, Notification, Str) {\r\n\r\n        const chapterCTA = 'button.complete-chapter';\r\n\r\n        const progressBar = 'div#contentdesigner-progressbar';\r\n\r\n        let completionIcon, completionStr;\r\n\r\n        var chapterInProgress = false;\r\n\r\n        const contentWrapper = () => document.querySelector('.contentdesigner-wrapper');\r\n        const chapters = () => document.querySelectorAll('.contentdesigner-chapter');\r\n\r\n        const initEventListeners = () => {\r\n            Templates.renderPix('e/tick', 'core').done(function (img) {\r\n                completionIcon = img;\r\n            });\r\n            Str.get_string('completion_manual:done', 'course').done((str) => {\r\n                completionStr = str;\r\n            });\r\n            // Remove previous eventlisteners on body. to support popup format.\r\n            document.body.removeEventListener('click', completeChapterListener);\r\n            document.body.addEventListener('click', completeChapterListener);\r\n\r\n            document.body.removeEventListener('click', chapternavigation);\r\n            document.body.addEventListener('click', chapternavigation);\r\n\r\n            automaticCompletion();\r\n\r\n            document.querySelector('#page').addEventListener('scroll', () => {\r\n                automaticCompletion();\r\n                stickyProgress();\r\n            });\r\n\r\n            // Popup format support.\r\n            var popup = document.querySelector('body.format-popups .modal-content .modal-body');\r\n            if (popup !== null) {\r\n                popup.addEventListener('scroll', () => {\r\n                    automaticCompletion();\r\n                    stickyProgress();\r\n                });\r\n            }\r\n\r\n            window.addEventListener('scroll', () => {\r\n                automaticCompletion();\r\n                stickyProgress();\r\n            });\r\n\r\n            // Listen the event form the element update.\r\n            contentWrapper().addEventListener('elementupdate', () => {\r\n                chapternavigation();\r\n            });\r\n\r\n            chapternavigation();\r\n        };\r\n\r\n        const completeChapterListener = (e) => {\r\n            var completeCTA = e.target.closest(chapterCTA);\r\n            if (completeCTA != undefined) {\r\n                e.preventDefault();\r\n                var chapter = completeCTA.dataset.chapterid;\r\n                var promise = completeChapter(chapter, completeCTA);\r\n                promise.done(() => {\r\n                    updateProgress();\r\n                    completeCTA.classList.remove('btn-outline-secondary');\r\n                    completeCTA.classList.add('btn-success');\r\n                    completeCTA.innerHTML = completionIcon + ' ' + completionStr;\r\n                    Elements.removeWarning();\r\n                    Elements.refreshContent();\r\n                    let chapterlist = e.target.closest('.chapters-list');\r\n \r\n                    if (chapterlist && !chapterlist.classList.contains('completed')) {\r\n                        chapterlist.classList.add('completed');\r\n                    }\r\n                    // TODO: Add a additional function to support loadnext chapter works like replaceonrefresh.\r\n                    // Until hide this loadNextchapters().\r\n                    // Elements.loadNextChapters(chapter);\r\n                }).catch(Notification.exception);\r\n            }\r\n        };\r\n\r\n        const stickyProgress = function () {\r\n            var progressElem = document.querySelector('.contentdesigner-progress');\r\n            var contentWrapper = document.querySelector('.contentdesigner-content');\r\n            if (progressElem && contentWrapper) {\r\n                if (contentWrapper != undefined && contentWrapper.getBoundingClientRect().top < 50) {\r\n                    contentWrapper.classList.add('sticky-progress');\r\n                    progressElem.classList.add('fixed-top');\r\n                } else {\r\n                    progressElem.classList.remove('fixed-top');\r\n                    contentWrapper.classList.remove('sticky-progress');\r\n                }\r\n            }\r\n        };\r\n\r\n        const completeChapter = (chapter, button) => {\r\n            var promises = AJAX.call([{\r\n                methodname: 'cdelement_chapter_update_completion',\r\n                args: {\r\n                    chapter: chapter,\r\n                    cmid: Elements.contentDesignerData().cmid\r\n                }\r\n            }]);\r\n            LoadingIcon.addIconToContainerRemoveOnCompletion(button, promises[0]);\r\n\r\n            return promises[0];\r\n        };\r\n\r\n        const updateProgress = () => {\r\n            var params = { cmid: Elements.contentDesignerData().cmid };\r\n            Fragment.loadFragment('cdelement_chapter', 'update_progressbar',\r\n                Elements.contentDesignerData().contextid, params).done((html, js) => {\r\n                    Templates.replaceNode(progressBar, html, js);\r\n                }).catch(Notification.exception);\r\n        };\r\n\r\n        /**\r\n         * Automatically completes the current chapter when it becomes visible.\r\n         */\r\n        const automaticCompletion = () => {\r\n            // Select all chapters with completion mode set to auto.\r\n            const chapters = Array.from(\r\n                document.querySelectorAll('.course-content-list .chapters-list[data-completionmode=\"1\"]')\r\n            );\r\n\r\n            // Return if no chapters are found or if an AJAX request is already in progress.\r\n            if (!chapters.length || chapterInProgress) {\r\n                return;\r\n            }\r\n\r\n            // Loop through the chapters.\r\n            for (let i = 0; i < chapters.length; i++) {\r\n                const currentChapter = chapters[i];\r\n\r\n                // Skip if the current chapter is already completed.\r\n                if (currentChapter.classList.contains('completed')) {\r\n                    continue;\r\n                }\r\n\r\n                // Check if the current chapter is in the viewport.\r\n                if (isElementInViewport(currentChapter)) {\r\n                    chapterInProgress = true;\r\n                    const chapterId = currentChapter.dataset.id;\r\n                    completion(currentChapter, chapterId);\r\n                }\r\n            }\r\n        };\r\n\r\n        const completion = (currentChapter, chapterId) => {\r\n            // AJAX call to complete the current chapter when the next one enters the viewport\r\n            AJAX.call([{\r\n                methodname: 'cdelement_chapter_update_completion',\r\n                args: {\r\n                    chapter: chapterId,\r\n                    cmid: Elements.contentDesignerData().cmid\r\n                }\r\n            }])[0].done(() => {\r\n                currentChapter.classList.add('completed');  // Mark as completed\r\n                updateProgress();\r\n                Elements.removeWarning();\r\n                Elements.refreshContent();\r\n                currentChapter.removeEventListener('scroll', automaticCompletion);\r\n            }).always(() => {\r\n                chapterInProgress = false;\r\n            }).catch(Notification.exception);\r\n\r\n        };\r\n\r\n        const isElementInViewport = (el) => {\r\n            // Helper function to check if an element is visible in the viewport.\r\n            const rect = el.getBoundingClientRect();\r\n            return (\r\n                rect.top < (window.innerHeight || document.documentElement.clientHeight) &&\r\n                rect.bottom > 0 &&\r\n                rect.left < (window.innerWidth || document.documentElement.clientWidth) &&\r\n                rect.right > 0\r\n            );\r\n        };\r\n\r\n        // Chapter navigation.\r\n        const chapternavigation = function () {\r\n            chapters().forEach((chapter) => {\r\n                chapter.addEventListener('click', function (e) {\r\n                    const chapterid = e.target.dataset.chapter;\r\n                    viewtochapter(chapterid);\r\n                });\r\n            });\r\n        };\r\n\r\n        // Ensure this function is defined or imported if it's in another file\r\n        const viewtochapter = (chapterid) => {\r\n            var chapterSelector = document.querySelector('li.chapters-list[data-id=\"' + chapterid + '\"]');\r\n            if (chapterSelector != undefined) {\r\n                chapterSelector.scrollIntoView(true);\r\n            }\r\n        };\r\n\r\n        return {\r\n            init: function () {\r\n                initEventListeners();\r\n            },\r\n        };\r\n    });\r\n"],"names":["define","$","Elements","AJAX","Fragment","Templates","LoadingIcon","Notification","Str","completionIcon","completionStr","chapterInProgress","initEventListeners","renderPix","done","img","get_string","str","document","body","removeEventListener","completeChapterListener","addEventListener","chapternavigation","automaticCompletion","querySelector","stickyProgress","popup","window","e","completeCTA","target","closest","undefined","preventDefault","chapter","dataset","chapterid","completeChapter","updateProgress","classList","remove","add","innerHTML","removeWarning","refreshContent","chapterlist","contains","catch","exception","progressElem","contentWrapper","getBoundingClientRect","top","button","promises","call","methodname","args","cmid","contentDesignerData","addIconToContainerRemoveOnCompletion","params","loadFragment","contextid","html","js","replaceNode","chapters","Array","from","querySelectorAll","length","i","currentChapter","isElementInViewport","chapterId","id","completion","always","el","rect","innerHeight","documentElement","clientHeight","bottom","left","innerWidth","clientWidth","right","forEach","viewtochapter","chapterSelector","scrollIntoView","init"],"mappings":";;;;;;;;;;;AA2BAA,mCAAO,CAAC,SAAU,+BAAgC,YAAa,gBAC3D,iBAAkB,mBAAoB,oBAAqB,aAC3D,SAAUC,EAAGC,SAAUC,KAAMC,SAAUC,UAAWC,YAAaC,aAAcC,SAMrEC,eAAgBC,kBAEhBC,mBAAoB,QAKlBC,mBAAqB,KACvBP,UAAUQ,UAAU,SAAU,QAAQC,MAAK,SAAUC,KACjDN,eAAiBM,OAErBP,IAAIQ,WAAW,yBAA0B,UAAUF,MAAMG,MACrDP,cAAgBO,OAGpBC,SAASC,KAAKC,oBAAoB,QAASC,yBAC3CH,SAASC,KAAKG,iBAAiB,QAASD,yBAExCH,SAASC,KAAKC,oBAAoB,QAASG,mBAC3CL,SAASC,KAAKG,iBAAiB,QAASC,mBAExCC,sBAEAN,SAASO,cAAc,SAASH,iBAAiB,UAAU,KACvDE,sBACAE,wBAIAC,MAAQT,SAASO,cAAc,iDACrB,OAAVE,OACAA,MAAML,iBAAiB,UAAU,KAC7BE,sBACAE,oBAIRE,OAAON,iBAAiB,UAAU,KAC9BE,sBACAE,oBAnCqBR,SAASO,cAAc,4BAuC/BH,iBAAiB,iBAAiB,KAC/CC,uBAGJA,qBAGEF,wBAA2BQ,QACzBC,YAAcD,EAAEE,OAAOC,QAvDZ,8BAwDIC,MAAfH,YAA0B,CAC1BD,EAAEK,qBACEC,QAAUL,YAAYM,QAAQC,UACpBC,gBAAgBH,QAASL,aAC/BhB,MAAK,KACTyB,iBACAT,YAAYU,UAAUC,OAAO,yBAC7BX,YAAYU,UAAUE,IAAI,eAC1BZ,YAAYa,UAAYlC,eAAiB,IAAMC,cAC/CR,SAAS0C,gBACT1C,SAAS2C,qBACLC,YAAcjB,EAAEE,OAAOC,QAAQ,kBAE/Bc,cAAgBA,YAAYN,UAAUO,SAAS,cAC/CD,YAAYN,UAAUE,IAAI,gBAK/BM,MAAMzC,aAAa0C,aAIxBvB,eAAiB,eACfwB,aAAehC,SAASO,cAAc,6BACtC0B,eAAiBjC,SAASO,cAAc,4BACxCyB,cAAgBC,iBACMlB,MAAlBkB,gBAA+BA,eAAeC,wBAAwBC,IAAM,IAC5EF,eAAeX,UAAUE,IAAI,mBAC7BQ,aAAaV,UAAUE,IAAI,eAE3BQ,aAAaV,UAAUC,OAAO,aAC9BU,eAAeX,UAAUC,OAAO,sBAKtCH,gBAAkB,CAACH,QAASmB,cAC1BC,SAAWpD,KAAKqD,KAAK,CAAC,CACtBC,WAAY,sCACZC,KAAM,CACFvB,QAASA,QACTwB,KAAMzD,SAAS0D,sBAAsBD,gBAG7CrD,YAAYuD,qCAAqCP,OAAQC,SAAS,IAE3DA,SAAS,IAGdhB,eAAiB,SACfuB,OAAS,CAAEH,KAAMzD,SAAS0D,sBAAsBD,MACpDvD,SAAS2D,aAAa,oBAAqB,qBACvC7D,SAAS0D,sBAAsBI,UAAWF,QAAQhD,MAAK,CAACmD,KAAMC,MAC1D7D,UAAU8D,YA5GF,kCA4G2BF,KAAMC,OAC1ClB,MAAMzC,aAAa0C,YAMxBzB,oBAAsB,WAElB4C,SAAWC,MAAMC,KACnBpD,SAASqD,iBAAiB,oEAIzBH,SAASI,SAAU7D,sBAKnB,IAAI8D,EAAI,EAAGA,EAAIL,SAASI,OAAQC,IAAK,OAChCC,eAAiBN,SAASK,OAG5BC,eAAelC,UAAUO,SAAS,cAKlC4B,oBAAoBD,gBAAiB,CACrC/D,mBAAoB,QACdiE,UAAYF,eAAetC,QAAQyC,GACzCC,WAAWJ,eAAgBE,cAKjCE,WAAa,CAACJ,eAAgBE,aAEhCzE,KAAKqD,KAAK,CAAC,CACPC,WAAY,sCACZC,KAAM,CACFvB,QAASyC,UACTjB,KAAMzD,SAAS0D,sBAAsBD,SAEzC,GAAG7C,MAAK,KACR4D,eAAelC,UAAUE,IAAI,aAC7BH,iBACArC,SAAS0C,gBACT1C,SAAS2C,iBACT6B,eAAetD,oBAAoB,SAAUI,wBAC9CuD,QAAO,KACNpE,mBAAoB,KACrBqC,MAAMzC,aAAa0C,YAIpB0B,oBAAuBK,WAEnBC,KAAOD,GAAG5B,+BAEZ6B,KAAK5B,KAAOzB,OAAOsD,aAAehE,SAASiE,gBAAgBC,eAC3DH,KAAKI,OAAS,GACdJ,KAAKK,MAAQ1D,OAAO2D,YAAcrE,SAASiE,gBAAgBK,cAC3DP,KAAKQ,MAAQ,GAKflE,kBAAoB,WAzKHL,SAASqD,iBAAiB,4BA0KlCmB,SAASvD,UAChBA,QAAQb,iBAAiB,SAAS,SAAUO,SAClCQ,UAAYR,EAAEE,OAAOK,QAAQD,QACnCwD,cAActD,kBAMpBsD,cAAiBtD,gBACfuD,gBAAkB1E,SAASO,cAAc,6BAA+BY,UAAY,MACjEJ,MAAnB2D,iBACAA,gBAAgBC,gBAAe,UAIhC,CACHC,KAAM,WACFlF"}